""" 1. Продвинутый sum.

Встроенная функция sum() в python вызывает ошибку, если один из элементов
последовательности не является числом, например sum([1, 2, ‘A’]).
- Напишите функцию sum_ignore_non_numbers(), которая имеет один
параметр items (список или кортеж).
- Функция должна вернуть сумму всех чисел (int, float) в переданной
последовательности. При этом все нечисловые значения должны
игнорироваться.
- Если чисел нет, то функция должна вернуть 0.
Если вызвать функцию со списком [1, 2, 'Hey', None, 4.3], то она должна вернуть 7.3"""

# def sum_ignore_non_numbers(items):
#     return sum(item for item in items if isinstance(item, (int, float)))
#
# print(sum_ignore_non_numbers([1, 2, 'Hey', None, 4.3]))  # 7.3
# print(sum_ignore_non_numbers([1, 2, 3, 4]))  # 10
# print(sum_ignore_non_numbers([]))  # 0


""" 2. Треугольник.

Треугольник возможен, если сумма любых двух его сторон больше длины третьей
стороны.
- Напишите функцию is_triangle(), которая имеет 3 параметра - длины сторон
треугольника.
- Функция должна возвращать True, если треугольник с переданными
сторонами может существовать, и False в противном случае.
Для is_triangle(2, 4, 9) правильный ответ - False, для is_triangle(3, 4, 5) - True."""

# def is_triangle(a, b, c):
#     return a + b > c and a + c > b and b + c > a
#
# print(is_triangle(2, 4, 9))  # False
# print(is_triangle(3, 4, 5))  # True


""" 3. Среднее значение.

- Напишите функцию average(), которая принимает произвольное
количество позиционных аргументов. (Можно передать любое число
аргументов).
- Функция должна посчитать среднее арифметическое всех переданных
чисел. (Представим, что в функцию передаются только числа).
- Если не передать ни одного аргумента, то функция должна вернуть 0.

Такой вызова функции average(1, 2, 3, 4, 5, 6, 7, 8) должен вернуть 4.5"""

# def average(*args):
#     return sum(args) / len(args) if args else 0
#
# print(average(1, 2, 3, 4, 5, 6, 7, 8))  # 4.5
# print(average())  # 0


""" 4.Общие строки.

- Напишите функцию common_strings(), которая имеет 3 параметра: list1,
list2 и ingore_case=True (значение по умолчанию).
- Функция должна вернуть новых список из тех значений, которые
встречаются в обоих списках. При этом, если ignore_case равен True, то
функция должна игнорировать регистр и считать строки “string” и “STRING”
одинаковыми. В противном случае функция должна учитывать регистр
символов и считать такие строки разными.
- Все строки в результирующем списке должны быть в нижнем регистре.
Например, существуют 2 списка:
fruits_1 = [‘banana’, ‘APPLE’, ‘watermelon’, ‘cherry’]
fruits_2 = [‘Mango’, ‘apple’, ‘orange’, ‘cherry’]
То вызов функции common_strings(fruits_1, fruits_2) должен вернуть [‘apple’,
‘cherry’]."""


# def common_strings(list1, list2, ignore_case=True):
#     def convert_to_lower(string):
#         return string.lower() if ignore_case else string
#
#     transformed_list1 = [convert_to_lower(item) for item in list1] # Преобразуем списки перед вычислением пересечения
#     transformed_list2 = [convert_to_lower(item) for item in list2]
#
#     result = list(set(transformed_list1).intersection(transformed_list2))  # Находим пересечение
#     return result
#
# fruits_1 = ['banana', 'APPLE', 'watermelon', 'cherry']
# fruits_2 = ['Mango', 'apple', 'orange', 'cherry']
# print(common_strings(fruits_1, fruits_2))  # ['apple', 'cherry']

""" 5. Модуль.

- Для всех функций из задач 1-4 напишите подробную строку документации.
- Создайте отдельный файл functions.py и переместите туда все эти
функции.
- Создайте новый файл (или используйте старый рабочий файл) в той же
рабочей директории и импортируйте в него функции из functions.py.
- Запустите импортированные функции с разными аргументами.

Все функции из первых пяти задач были написаны в отдельных файлах (functions.py) и импортированы в
functions.py запуск из файла main.py."""


""" 6. Ответьте на следующие вопросы:
- Каким образом можно преобразовать строку в число? А число в строку?
- Для чего нужен elif в условном операторе?
- Что такое бесконечные циклы и как их избегать?

Ответы на вопросы: 
    1. Как преобразовать строку в число и число в строку?
Строку в число: Используйте функции int() или float() в зависимости от требуемого числового формата:
num = int("42")    # Преобразует строку в целое число
num = float("42.5")  # Преобразует строку в число с плавающей точкой
Важно: строка должна быть в правильном формате для числового преобразования. Например, вызов int("abc") вызовет ошибку.

Число в строку: Используйте функцию str():
text = str(42)      # Преобразует число в строку
text = str(42.5)    # Преобразует число с плавающей точкой в строку

    2. Для чего нужен elif в условном операторе?
elif (сокращение от "else if") позволяет добавить дополнительные условия в конструкцию if-else. Это используется, 
если нужно проверить несколько различных условий:

x = 10
if x > 20:
    print("x больше 20")
elif x == 10:
    print("x равно 10")  # Это условие выполнится
else:
    print("x меньше 10")
Если первое условие if ложно, то проверяется условие в elif. Если elif тоже ложно, выполняется код в else. 
Это позволяет избежать многократного использования вложенных if и упрощает читаемость кода.

    3. Что такое бесконечные циклы и как их избегать?
Бесконечные циклы: Это циклы, которые никогда не завершаются сами по себе. Они могут возникнуть, 
если условие завершения цикла никогда не становится ложным. Пример бесконечного цикла:

while True:
    print("Этот цикл бесконечный")
Как избежать:

Убедитесь, что условие цикла может стать ложным. Например:

count = 0
while count < 5:
    print(count)
    count += 1  # Увеличиваем счетчик, чтобы цикл завершился
Используйте явное завершение с break:

while True:
    data = input("Введите 'exit' для выхода: ")
    if data == "exit":
        break
		
Не забывайте обновлять переменные, которые участвуют в условии цикла. Например, если используете цикл while, 
убедитесь, что переменная в условии изменяется в теле цикла."""


""" 7. КаКоЕ-тО вОлНеНиЕ.

- Создать переменную text, значение которой определяется через ввод
данных с клавиатуры.
- Каждый символ под четным индексом должен быть переведен в верхний
регистр, а каждый нечетный в нижний.
- Вывести полученную строку на экран.

Если была введена строка “Чтобы продать что-нибудь ненужное, нужно сначала
купить что-нибудь ненужное, а у нас денег нет.”, то результат должен быть “ЧтОбЫ
ПрОдАтЬ ЧтО-НиБуДь нЕнУжНоЕ, нУжНо сНаЧаЛа кУпИтЬ ЧтО-НиБуДь нЕнУжНоЕ, а у нАс дЕнЕг нЕт.” """


# text = input("Введите текст: ")
#
# result = ""
# for i in range(len(text)):
#     if i % 2 == 0:
#         result += text[i].upper()
#     else:
#         result += text[i].lower()
# print(result)
