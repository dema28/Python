""" 1. Магазин.

Есть словарь с товарами:
products = {
"apple": {"quantity": 10, "price": 100},
"banana": {"quantity": 20, "price": 50},
"orange": {"quantity": 15, "price": 80},
"grape": {"quantity": 8, "price": 120},
"milk":{"quantity": 12, "price": 90},
"bread": {"quantity": 30, "price": 40}
}
- Необходимо увеличить цену всех продуктов на 20 процентов.
- Удалить товар “milk”.
- Добавить товар “Salt” с количеством 7 и ценой 12.
- Вывести общую стоимость всех товаров в магазине.
Ответ: 6516.0"""

# products = {
#     "apple": {"quantity": 10, "price": 100},
#     "banana": {"quantity": 20, "price": 50},
#     "orange": {"quantity": 15, "price": 80},
#     "grape": {"quantity": 8, "price": 120},
#     "milk": {"quantity": 12, "price": 90},
#     "bread": {"quantity": 30, "price": 40}
# }
#
# # 1. Увеличить цену всех продуктов на 20 процентов.
# for product, data in products.items():
#     data["price"] = data["price"] * 1.20
#
# # 2. Удалить товар "milk".
# if "milk" in products:
#     del products["milk"]
#
# # 3. Добавить товар "Salt" с количеством 7 и ценой 12.
# products["salt"] = {"quantity": 7, "price": 12}
#
# # 4. Вывести общую стоимость всех товаров в магазине.
# total_price = sum(data["price"] * data["quantity"] for data in products.values())
# print(f"Общая стоимость всех товаров в магазине: {total_price:.2f}")


""" 2. Alice.
Есть два списка одинаковой длины:
keys = ['name', 'age', 'city', 'occupation', 'email', 'phone', 'hobby', 'education',
'company', 'salary']

values = ['Alice', 30, 'New York', 'Engineer', 'alice@example.com', '+1234567890',
'Reading', 'Masters in Computer Science', 'TechCorp', 90000]

- Создайте словарь info из ключей keys и значений values. (Каждое
значение занимает ту же позицию, что и ключ в другом списке)
- Выведите словарь info на экран."""


# from pprint import pprint
# keys = ['name', 'age', 'city', 'occupation', 'email', 'phone', 'hobby', 'education', 'company', 'salary']
#
# values = ['Alice', 30, 'New York', 'Engineer', 'alice@example.com', '+1234567890', 'Reading', 'Masters in Computer Science', 'TechCorp', 90000]
#
# dct = dict(zip(keys, values))
# pprint(dct)
#
# 2. Вариант:
# info = {keys[i]: values[i] for i in range(len(keys))}
# pprint(info)


""" 3. Шифр.

Есть сообщение (строка):
"2__234йшDGмёшSDFжкъrrrщзнSDF78юкйфуSDFшёью$#2Sшжйи3%узфsdf34нкфы
vvя"
И ключ к шифру, где каждую букву нужно заменить на ее значение в словаре:
cipher = {
"а": "щ", "б": "д", "в": "ю", "г": "ф", "д": "з", "е": "м", "ё": "р",
"ж": "т", "з": "п", "и": "я", "й": "с", "к": "н", "л": "э", "м": "к",
"н": "л", "о": "ё", "п": "ж", "р": "ц", "с": "б", "т": "у", "у": "в",
"ф": "о", "х": "и", "ц": "х", "ч": "г", "ш": "е", "щ": "й", "ъ": "ы",
"ы": "ч", "ь": "ш", "э": "ъ", "ю": "а", "я": "ь"
}
- Расшифруйте секретное сообщение с помощью ключа cipher, при этом
мусорные значение (которых нет в словаре) должны быть пропущены и не
добавлены в результат.
- Выведите результат на экран.
- Дополнительно: напишите программу, которая получает строку через ввод
с клавиатуры и “отправляет” зашифрованный ответ агенту."""

# cipher = {
#     "а": "щ", "б": "д", "в": "ю", "г": "ф", "д": "з", "е": "м", "ё": "р",
#     "ж": "т", "з": "п", "и": "я", "й": "с", "к": "н", "л": "э", "м": "к",
#     "н": "л", "о": "ё", "п": "ж", "р": "ц", "с": "б", "т": "у", "у": "в",
#     "ф": "о", "х": "и", "ц": "х", "ч": "г", "ш": "е", "щ": "й", "ъ": "ы",
#     "ы": "ч", "ь": "ш", "э": "ъ", "ю": "а", "я": "ь"
# }
#
# secret_message = "2__234йшDGмёшSDFжкъrrrщзнSDF78юкйфуSDFшёью$#2Sшжйи3%узфsdf34нкфыvvя"  # Заменить на вашу секретную строку
#
# decrypted_message = "".join(cipher.get(char, "") for char in secret_message)  # Расшифровка секретного сообщения
# print("Расшифрованное сообщение:", decrypted_message)
#
# user_input = input("Введите сообщение для шифрования: ")  # Получение строки от пользователя и её шифрование
#
# encrypted_user_input = "".join(cipher.get(char, char) for char in user_input)  # Шифровка пользовательского ввода
#
# print("Зашифрованное сообщение от пользователя:", encrypted_user_input)


""" 4. Самая популярная буква.

Есть строка:
dialog = "Doc: Запомни! Согласно моей теории, ты помешал знакомству
своих родителей.
Если они не встретятся, то не влюбятся, не поженятся, и у них не будет детей.
Поэтому твой старший брат исчезает с фотографии. Затем очередь твоей
сестры,
и если ты все не исправишь, ты будешь следующим.
Marty: Тяжелый случай.

Doc: Вес тут совершенно ни при чем."
# Тройные кавычки позволяют удобно писать текст в несколько строк.
- С помощью словаря подсчитайте количество букв в строке dialog
игнорируя регистр. Ключами в словаре должны быть буквы, а значения -
количество вхождения буквы в текст. Например: {'т': 26, 'е': 32...}
- Вывести на экран букву, которая встречается максимальное количество
раз."""


# from collections import Counter
#
# dialog = ("""Doc: Запомни! Согласно моей теории, ты помешал знакомству\nЕсли они не встретятся,
#           то не влюбятся, не поженятся, и у них не будет детей.\nПоэтому твой старший брат исчезает с фотограф""")
#
# char_counts = Counter(char.lower() for char in dialog if char.isalpha())  # Подсчитываем количество букв в тексте, игнорируя регистр
#
# max_char, max_count = max(char_counts.items(), key=lambda x: x[1])  # Находим букву с максимальным количеством вхождений
# print(f"Буква '{max_char}' встречается {max_count} раз.")




